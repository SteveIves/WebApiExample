import System.Collections.Generic
import Synergex.SynergyDE.Select

namespace WebApiServices.Models

    ;;; <summary>
    ;;; Data repository for the Department master file (DAT:department.ism)
    ;;; </summary>
    public partial class DepartmentRepository implements IDepartmentRepository

        private const fileSpec, string, "DAT:department.ism"

        ;;; <summary>
        ;;; Read all records.
        ;;; </summary>
        ;;; <param name="results">Returned collection of records.</param>
        ;;; <returns>RepositoryResult.Success or RepositoryResult.NotFound</returns>
        public method ReadAll, RepositoryResult
            required out results, @List<Department>
        proc
            results = new List<Department>()
            data departmentRec, strDepartment
            foreach departmentRec in new Select(new From(fileSpec,departmentRec))
                results.Add(new Department(departmentRec))
            mreturn results.Count > 0 ? RepositoryResult.Success : RepositoryResult.NotFound
        endmethod

        ;;; <summary>
        ;;; Read a specific record by primary key.
        ;;; </summary>
        ;;; <param name="aId">Department ID</param>
        ;;; <param name="aDepartment">Returned data object.</param>
        ;;; <returns>RepositoryResult.Success or RepositoryResult.NotFound</returns>
        public method Read, RepositoryResult
            required in aId, String
            required out aDepartment, @Department
        proc
            data departmentRec, strDepartment
            foreach departmentRec in new Select(new From(fileSpec,departmentRec),(Where)((departmentRec.id==aId)))
            begin
                aDepartment = new Department(departmentRec)
                mreturn RepositoryResult.Success
            end
            mreturn RepositoryResult.NotFound
        endmethod
        
        ;;; <summary>
        ;;; Retrieve all departments by MANAGER.
        ;;; </summary>
        ;;; <param name="aManager">Department manager.</param>
        ;;; <param name="results">Returned collection of records.</param>
        ;;; <returns>RepositoryResult.Success or RepositoryResult.NotFound</returns>
        public method ReadByMANAGER, RepositoryResult
            required in  aManager, int
            required out results, @List<Department>
        proc
            results = new List<Department>()
            data departmentRec, strDepartment
            foreach departmentRec in new Select(new From(fileSpec,departmentRec),(NoCaseWhere)((departmentRec.MANAGER==aManager)))
                results.Add(new Department(departmentRec))
            mreturn results.Count > 0 ? RepositoryResult.Success : RepositoryResult.NotFound
        endmethod

        ;;; <summary>
        ;;; Create a new record.
        ;;; </summary>
        ;;; <param name="departmentObj">Department master.</param>
        ;;; <returns>RepositoryResult.Success, RepositoryResult.Exists or RepositoryResult.DuplicateKey</returns>
        public method Create, RepositoryResult
            required in departmentObj, @Department
        proc
            data response, RepositoryResult
            data departmentRec, strDepartment, departmentObj.ToRecord()
            data chn, i4

            ;;Open the file
            open(chn=0,U:I,fileSpec)

            ;;Check the record doesn't already exist
            try
            begin
                data tmpRec, strDepartment
                read(chn,tmpRec,%keyval(chn,departmentRec,0),LOCK:Q_NO_LOCK)
                response = RepositoryResult.Exists
            end
            catch (e, @KeyNotSameException)
            begin
                nop
            end
            catch (e, @EndOfFileException)
            begin
                nop
            end
            endtry

            ;;Create the new record
            if (response != RepositoryResult.Exists)
            begin
                try
                begin
                    store(chn,departmentRec)
                    response = RepositoryResult.Success
                end
                catch (e, @DuplicateException)
                begin
                    response = RepositoryResult.DuplicateKey
                end
                endtry
            end

            ;;Close the file
            close chn

            mreturn response

        endmethod

        ;;; <summary>
        ;;; Update an existing record.
        ;;; </summary>
        ;;; <param name="departmentObj">Department master.</param>
        ;;; <returns>RepositoryResult.Success, RepositoryResult.NotFound, RepositoryResult.DuplicateKey or RepositoryResult.KeyChange</returns>
        public method Update, RepositoryResult
            required in departmentObj, @Department
        proc
            data departmentRec, strDepartment, departmentObj.ToRecord()
            data chn, i4
            data response, RepositoryResult
                
            ;;Open the file
            open(chn=0,U:I,fileSpec)

            ;;Read and lock the department record
            try
            begin
                data tmpRec, strDepartment
                read(chn,tmpRec,%keyval(chn,departmentRec,0))
                try
                begin
                    write(chn,departmentRec)
                    response = RepositoryResult.Success
                end
                catch (e, @DuplicateException)
                begin
                    response = RepositoryResult.DuplicateKey
                end
                catch (e, @KeyNotSameException)
                begin
                    response = RepositoryResult.KeyChange
                end
                endtry
            end
            catch (e, @KeyNotSameException)
            begin
                response = RepositoryResult.NotFound
            end
            catch (e, @EndOfFileException)
            begin
                response = RepositoryResult.NotFound
            end
            endtry

            ;;Close the file
            close chn

            mreturn response

        endmethod
        
        ;;; <summary>
        ;;; Delete a record.
        ;;; </summary>
        ;;; <param name="aId">Department ID</param>
        ;;; <returns>RepositoryResult.Success or RepositoryResult.NotFound</returns>
        public method Delete, RepositoryResult
            required in aId, String
        proc
            data response, RepositoryResult
            data chn, i4

            ;;Open the file
            open(chn=0,U:I,fileSpec)

            ;;Put the key segments into departmentRec so we can use %keyval
            data departmentRec, strDepartment
            departmentRec.id = aId

            try
            begin
                read(chn,departmentRec,%keyval(chn,departmentRec,0))
                delete(chn)
                response = RepositoryResult.Success
            end
            catch (e, @KeyNotSameException)
            begin
                response = RepositoryResult.NotFound
            end
            catch (e, @EndOfFileException)
            begin
                response = RepositoryResult.NotFound
            end
            endtry

            ;;Close the file
            close chn

            mreturn response

        endmethod
        
    endclass

endnamespace